{"version":3,"sources":["App.js","components/ResultComponent.js","components/KeyPadComponent.js","components/UserLog.js","components/UserLogin/UserLogin.js","serviceWorker.js","index.js"],"names":["client","W3CWebSocket","App","React","memo","useState","result","setResult","expressionLog","setExpressionLog","user","setUser","useEffect","onopen","onmessage","message","dataFromServer","JSON","parse","data","type","newEntry","equation","time","NewRecords","length","pop","calculate","useCallback","eval","expression","Date","toLocaleTimeString","hour","minute","send","stringify","e","reset","backspace","slice","onClick","button","className","onSubmit","ResultComponent","KeyPadComponent","props","children","useMemo","isNaN","name","target","UserLog","map","log","index","key","UserLogin","input","setInput","inputChange","value","charAt","trim","placeholder","onChange","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.0353fa33.chunk.js","sourcesContent":["/* eslint-disable no-eval */\nimport React from 'react';\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\nimport './App.css';\nimport ResultComponent from './components/ResultComponent';\nimport KeyPadComponent from \"./components/KeyPadComponent\";\nimport UserLog from \"./components/UserLog\";\nimport UserLogin from \"./components/UserLogin\";\n\nconst client = new W3CWebSocket('wss://sezzleserver.herokuapp.com');\n\nconst App = React.memo(() => {\n  const [result, setResult] = React.useState(\"\");\n  const [expressionLog, setExpressionLog] = React.useState([]);\n  const [user, setUser] = React.useState(\"\");\n\n  React.useEffect(() => {\n    client.onopen = () => {\n      // console.log('Websocket client connected !!');\n    };\n    client.onmessage = (message) => {\n      const dataFromServer = JSON.parse(message.data);\n      // console.log('got reply !!' , dataFromServer);\n      if(dataFromServer.type === \"message\")\n      {\n        const newEntry = {\n          equation: dataFromServer.equation,\n          user: dataFromServer.user,\n          time: dataFromServer.time\n        };\n        if (user) {\n          const NewRecords = [newEntry, ...expressionLog];\n          // NewRecords.push();\n          if (NewRecords.length > 10) {\n            NewRecords.pop();\n          }\n          setExpressionLog(NewRecords);\n        }\n      }\n    }\n  }, [expressionLog, setExpressionLog, user]);\n\n  const calculate = React.useCallback(() => {\n      try {\n        setResult((eval(result) || \"\" ) + \"\");\n        let expression = result + \"=\"+ eval(result);\n        const time = new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});;\n\n        client.send(JSON.stringify({\n          type : \"message\",\n          equation: expression,\n          user: user,\n          time: time\n        }));\n      } catch (e) {\n        setResult(\"error\");\n      }\n  }, [user, result, setResult]);\n\n  const reset = React.useCallback(() => {\n    setResult(\"\");\n  }, [setResult]);\n\n  const backspace = React.useCallback(() => {\n    setResult(result.slice(0, -1));\n  }, [result, setResult]);\n\n\n  const onClick = React.useCallback(button => {\n\n        switch (button) {\n          case \"=\":\n            calculate();\n            break;\n          case \"C\":\n            reset();\n            break;\n          case \"CE\":\n            backspace();\n            break;\n          default:\n            setResult(result + button);\n        }\n    }, [calculate, reset, backspace, result, setResult]);\n\n    return user ? (\n        <div>\n            <h2 className=\"userLog-p\">Sezzle Calculator Assessment</h2>\n            <div>\n              <div className=\"calculator-body\">\n                  <ResultComponent result={result}/>\n                  <KeyPadComponent onClick={onClick}/>\n              </div>\n              <UserLog expressionLog={expressionLog} />\n            </div>\n            \n            \n        </div>\n      ) : (\n          <UserLogin onSubmit={setUser}/>\n      );\n});\n\nexport default App;\n","import React from 'react';\n\nconst ResultComponent = React.memo(({ result }) => {\n    return (\n        <div className=\"result\">\n            <p>{result}</p>\n        </div>\n    );\n});\n\n\nexport default ResultComponent;\n","import React from 'react';\n\nconst KeyPadComponent = React.memo(props => {\n    const { children, onClick } = props;\n\n    const isOperator = React.useMemo(() => {\n        return !isNaN(children) || children === '.' || children === '=';\n    }, [children]);\n    return (\n        // {`button${ isOperator ? \"\" : \" operator\"}`}\n        <div>\n            <button name=\"(\" onClick={e => onClick(e.target.name)}>(</button>\n            <button name=\"CE\" onClick={e => onClick(e.target.name)}>CE</button>\n            <button name=\")\" onClick={e => onClick(e.target.name)}>)</button>\n            <button name=\"C\" onClick={e => onClick(e.target.name)}>C</button><br/>\n\n\n            <button name=\"1\" onClick={e => onClick(e.target.name)}>1</button>\n            <button name=\"2\" onClick={e => onClick(e.target.name)}>2</button>\n            <button name=\"3\" onClick={e => onClick(e.target.name)}>3</button>\n            <button className=\"operator\" name=\"+\" onClick={e => onClick(e.target.name)}>+</button><br/>\n\n\n            <button name=\"4\" onClick={e => onClick(e.target.name)}>4</button>\n            <button name=\"5\" onClick={e => onClick(e.target.name)}>5</button>\n            <button name=\"6\" onClick={e => onClick(e.target.name)}>6</button>\n            <button className=\"operator\" name=\"-\" onClick={e => onClick(e.target.name)}>-</button><br/>\n\n            <button name=\"7\" onClick={e => onClick(e.target.name)}>7</button>\n            <button name=\"8\" onClick={e => onClick(e.target.name)}>8</button>\n            <button name=\"9\" onClick={e => onClick(e.target.name)}>9</button>\n            <button className=\"operator\" name=\"*\" onClick={e => onClick(e.target.name)}>x</button><br/>\n\n\n            <button className=\"operator\" name=\".\" onClick={e => onClick(e.target.name)}>.</button>\n            <button name=\"0\" onClick={e => onClick(e.target.name)}>0</button>\n            <button className=\"operator\" name=\"=\" onClick={e => onClick(e.target.name)}>=</button>\n            <button className=\"operator\" name=\"/\" onClick={e => onClick(e.target.name)}>÷</button><br/>\n        </div>\n    );\n});\n\nexport default KeyPadComponent;\n","import React from 'react';\nimport './UserLog.css';\n\nconst UserLog = React.memo(({ expressionLog }) => {\n  return (\n    <div className=\"userLog\">\n      <p className=\"userLog-p\">Most recent 10 calculations</p>\n      <ul>\n        {\n          expressionLog.map((log, index) =>\n          <li key={index}>\n            User: {log.user} &nbsp;&nbsp; Time: {log.time} &nbsp;&nbsp; Equation: {log.equation}\n          </li>\n        )}\n      </ul>\n    </div>\n  );\n});\n\nexport default UserLog ;\n","import React from \"react\";\nimport \"./UserLogin.css\";\n\nconst UserLogin = React.memo(({ onSubmit }) => {\n  const [input, setInput] = React.useState(\"\");\n\n  const inputChange = React.useCallback(e => {\n    if(e.target.value.charAt(0) !== \" \") {\n      setInput(e.target.value)\n    }\n  }, [setInput]);\n  const onClick = React.useCallback(e => {\n    if(input && input.trim()) {\n      onSubmit(input);\n    }\n  }, [input, onSubmit]);\n  return (\n    <div className=\"u-form\">\n      <input  className=\"u-input\" type=\"text\" placeholder=\"Please Enter your Name\" onChange={inputChange} value={input}/>\n      <button className=\"u-btn\" onClick={onClick}>Submit</button>\n    </div>\n  );\n});\n\nexport default UserLogin;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}